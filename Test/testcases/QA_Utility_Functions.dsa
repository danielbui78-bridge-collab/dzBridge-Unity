// DAZ Studio version 4.16.0.3 filetype DAZ Script

/////////////////////////////////////
// Validation functions
/////////////////////////////////////
function Validate_DTU_file( sDtuFilename )
{
/*
	var oFile = new DzFile( sDtuFilename );
	if ( !oFile.exists() )
	{
		print("DTU File not found [FAILED].");
		return false;
	}

	oFile.open( DzFile.ReadOnly );
	if (!oFile)
	{
		print("Unable to open DTU file [FAILED].");
		return false;
	}

	var sDTU_contents = oFile.read();
	if (!sDTU_contents)
	{
		print("Unable to read file [FAILED].");
		return false;
	}

	var oDTU = {};
	try
	{
		oDTU = JSON.parse(sDTU_contents);
	}
	catch (e)
	{
		oDTU = false;
	}
*/
	var oDTU = Load_DTU_file(sDtuFilename);

	if (!oDTU)
	{
		print("DTU: Invalid JSON format [FAILED].");
		return false;
	}
	else
	{
		print("DTU: Valid JSON format [OK].");
		return true;
	}
	return false;
}

function Load_DTU_file (sDtuFilename)
{
	var oFile = new DzFile( sDtuFilename );
	if ( !oFile.exists() )
	{
		print("DTU File not found [FAILED].");
		return false;
	}

	oFile.open( DzFile.ReadOnly );
	if (!oFile)
	{
		print("Unable to open DTU file [FAILED].");
		return false;
	}

	var sDTU_contents = oFile.read();
	if (!sDTU_contents)
	{
		print("Unable to read file [FAILED].");
		return false;
	}

	var oDTU = {};
	try
	{
		oDTU = JSON.parse(sDTU_contents);
	}
	catch (e)
	{
		oDTU = false;
	}

	return oDTU;	
}

function Validate_FBX_file (sFbxFilename)
{
	var oFBXi = new OpenFBXInterface();
	var result = oFBXi.LoadScene(sFbxFilename);
	if (result)
	{
		print("FBX fileformat check passed: valid FBX file");
		return true;
	}
	else
	{
		print("FBX fileformat check failed: invalid FBX file");
		return false;
	}
	return false;
}

function Validate_NormalMaps (arrNormalMapList, sDTUpath)
{
 	var sExportTexturesFolder = sDTUpath + "/" + "exporttextures";
 	//print(sExportTexturesFolder)
	var oFolderInfo = new DzDir( sExportTexturesFolder );
	if ( !oFolderInfo.exists() )
	{
		print("Normal map folder not found [FAILED].");
		return false;
	}
	else
	{
		print("Generated Normal map folder found:");
	}
	oFolderInfo.setNameFilters(["*_nm.png"]);
	var numFiles = oFolderInfo.count();
	if (numFiles != arrNormalMapList.length)
	{
		print("Incorrect number of normal maps found [FAILED].");
		return false;
	}
	for (i=0; i < arrNormalMapList.length ; i++)
	{
		sNormalMapPath = sExportTexturesFolder + "/" + arrNormalMapList[i];
		var oFileInfo = new DzFileInfo(sNormalMapPath);
		if (oFileInfo.exists())
		{
			print("Generated normal map found: " + arrNormalMapList[i] + ":");
			if (Validate_Image_Format(sNormalMapPath) == false)
			{
				return false;
			}
		}
		else
		{
			print("Normal map not found: " + arrNormalMapList[i] + " [FAILED]");
			return false;
		}
	}

    /////////////////////////////////////////////
	// TODO: Check undoGenerateMissingNormalMaps()
	// Check All Surfaces to Verify that
	// added Normal Maps were properly
	// removed.
	/////////////////////////////////////////////

	return true;
}

function Validate_Image_Format(sImagePath)
{
	var img = new QImage;
	if (img.load(sImagePath) == true)
	{
		print("  - valid image format. [OK]");
		return true;
	}
	else
	{
		print("  - invalid format. [FAILED]")
		return false;
	}

	print ("UNKNOWN ERROR: Validate_Image_Format( \"" + sImagePath + "\" )");
	return false;
}

function Validate_LIE_Textures(nNumLIETextures, sNameFilters, sDTUpath)
{
 	var sExportTexturesFolder = sDTUpath + "/" + "exporttextures";
	var oTextureFolder = DzDir(sExportTexturesFolder);
	if (oTextureFolder.exists() == false)
	{
		print("ExportTextures subfolder was NOT generated [FAILED].");
		return false;
	}

	oTextureFolder.setNameFilters(sNameFilters);
	var oFileList = oTextureFolder.entryList();

	if (oFileList.length != nNumLIETextures)
	{
		print("Incorrect number of LIE textures found [FAILED].");
		return false;
	}
	for (var i=0; i < oFileList.length; i++)
	{
		var sTexturePath = sExportTexturesFolder + "/" + oFileList[i];
		print("LIE texture found: " + oFileList[i] + ":");
		if (Validate_Image_Format(sTexturePath) == false)
		{
			return false;
		}
	}

	return true;
}

/////////////////////////////////////
// Run Test Case function
/////////////////////////////////////
function Run_Exporter(sExportFilename, sAssetType, sRootFolder, sExportFolder, sProductName, sComponentName, arrayMorphList)
{
	var obj = new DzBridgeUnityAction()
	obj.resetToDefaults();
	obj.setNonInteractiveMode(1);

	// obj.UseRelativePaths: set true for relative Daz Library runtime paths
	//                       set false for absolute filepath
	// Default to true to work with interactive mode
	obj.setUseRelativePaths(false);
	// obj.UseRelativePaths = true;

	// obj.ExportFilename: filename stem for DTU and FBX file
	// Can not have spaces or hyphen.  Underscore is OK
	// Leave blank to default to sanitized Scene Node Label
	if (sExportFilename != "")
	{
		obj.setExportFilename(sExportFilename);
	}

	// obj.AssetType: "SkeletalMesh" [DEFAULT], "StaticMesh", "Animation", "Environment", "Pose"
	if (sAssetType != "")
	{
		obj.setAssetType(sAssetType);
	}

	// obj.RootFolder: path to destination root
	// If folder or path doesn't exist, it will be created
	if (sRootFolder != "")
	{
		obj.setRootFolder(sRootFolder);
	}

	// obj.ExportFolder: name folder containing DTU/FBX
	// Leave blank to default to sanitized Scene Node Label like ExportFilename
	if (sExportFolder != "")
	{
		obj.setExportFolder(sExportFolder);
	}

	// obj.ProductName: Daz Store Product Name (or anything you want), can have spaces & special characters
	if (sProductName != "")
	{
		obj.setProductName(sProductName);
	}

	// obj.ProductComponentName: Friendly Name for component within Product
	// Put frienldy pose name or material name here
	if (sComponentName != "")
	{
		obj.setProductComponentName(sComponentName);
	}

	// obj.MorphList: String array of morphs to convert into blendshapes within FBX.
	// Leave empty if you do not want to export any blendshapes.
	//obj.MorphList = ["CTRLVictoria8_1", "FHMVictoria8_1", "FBMVictoria8_1"]
	if (arrayMorphList.length > 0)
	{
		obj.setMorphList(arrayMorphList);
	}

	obj.executeAction()

	var sReturnString = obj.getRootFolder() + "/" + obj.getExportFolder() + "/" + obj.getExportFilename() + ".dtu"

	return sReturnString;
}


// Run_Exporter2():
// Description: Like Run_Exporter() but does not call resetToDefaults() and does not initialize DzUnrealAction()
function Run_Exporter2(oBridge, sExportFilename, sAssetType, sRootFolder, sExportFolder, sProductName, sComponentName, arrayMorphList)
{
	var obj = oBridge;
	obj.setNonInteractiveMode(1);

	// obj.UseRelativePaths: set true for relative Daz Library runtime paths
	//                       set false for absolute filepath
	// Default to true to work with interactive mode
	obj.setUseRelativePaths(false);
	// obj.UseRelativePaths = true;

	// obj.ExportFilename: filename stem for DTU and FBX file
	// Can not have spaces or hyphen.  Underscore is OK
	// Leave blank to default to sanitized Scene Node Label
	if (sExportFilename != "")
	{
		obj.setExportFilename(sExportFilename);
	}

	// obj.AssetType: "SkeletalMesh" [DEFAULT], "StaticMesh", "Animation", "Environment", "Pose"
	if (sAssetType != "")
	{
		obj.setAssetType(sAssetType);
	}

	// obj.RootFolder: path to destination root
	// If folder or path doesn't exist, it will be created
	if (sRootFolder != "")
	{
		obj.setRootFolder(sRootFolder);
	}

	// obj.ExportFolder: name folder containing DTU/FBX
	// Leave blank to default to sanitized Scene Node Label like ExportFilename
	if (sExportFolder != "")
	{
		obj.setExportFolder(sExportFolder);
	}

	// obj.ProductName: Daz Store Product Name (or anything you want), can have spaces & special characters
	if (sProductName != "")
	{
		obj.setProductName(sProductName);
	}

	// obj.ProductComponentName: Friendly Name for component within Product
	// Put frienldy pose name or material name here
	if (sComponentName != "")
	{
		obj.setProductComponentName(sComponentName);
	}

	// obj.MorphList: String array of morphs to convert into blendshapes within FBX.
	// Leave empty if you do not want to export any blendshapes.
	//obj.MorphList = ["CTRLVictoria8_1", "FHMVictoria8_1", "FBMVictoria8_1"]
	if (arrayMorphList.length > 0)
	{
		obj.setMorphList(arrayMorphList);
	}

	obj.executeAction()

	var sReturnString = obj.getRootFolder() + "/" + obj.getExportFolder() + "/" + obj.getExportFilename() + ".dtu"

	return sReturnString;
}
